{"version":3,"sources":["work.js","App.js","serviceWorker.js","index.js"],"names":["theme","css","mouse","THREE","raycaster","isJoint","j","isURDFJoint","jointType","LoadModel","robotJointName","filepath","React","useState","hovered","setHovered","useThree","camera","gl","posX","useControl","type","spring","posY","posZ","ref","useRef","robot","useLoader","URDFLoader","loader","loadMeshFunc","path","manager","done","STLLoader","load","result","material","mesh","err","fetchOptions","headers","Accept","useMemo","Object","keys","joints","jointName","items","value","angle","min","max","onChange","e","setAngle","highlightMaterial","shininess","color","emissive","emissiveIntensity","highlightLinkGeometry","m","revert","traverse","c","__origMaterial","i","children","length","onMouseMove","event","el","v","domElement","x","pageX","offsetLeft","offsetWidth","y","pageY","offsetTop","offsetHeight","collision","setFromCamera","meshes","push","intersectObjects","getCollisions","shift","joint","curr","parent","findNearestJoint","object","position-x","position-y","position-z","rotation","Math","PI","scale","dispose","onPointerMove","onPointerOut","Work","orbit","transform","mode","useEffect","current","controls","setMode","callback","enabled","addEventListener","removeEventListener","position","skyColor","groundColor","intensity","shadowMapWidth","shadowMapHeight","castShadow","fallback","args","globalStyles","emotionReset","App","styles","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","props","qs","queryString","parse","search","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2267f855.chunk.js","sourcesContent":["/** @jsx jsx */\nimport * as THREE from \"three\";\nimport React, { useRef, useEffect, Suspense, useMemo } from \"react\";\nimport { Canvas, useLoader, useThree } from \"react-three-fiber\";\nimport { css, jsx } from \"@emotion/core\";\nimport { a } from \"@react-spring/three\";\n\nimport { STLLoader } from \"three/examples/jsm/loaders/STLLoader.js\";\nimport URDFLoader from \"urdf-loader\";\n\nimport { OrbitControls, TransformControls } from \"drei\";\nimport { Controls, useControl } from \"react-three-gui\";\n\nconst theme = css`\n  width: 100vw;\n  height: 100vh;\n  background-color: #272727;\n`;\n\n/*\nReference coordinate frames for THREE.js and ROS.\nBoth coordinate systems are right handed so the URDF is instantiated without\nframe transforms. The resulting model can be rotated to rectify the proper up,\nright, and forward directions\n\nTHREE.js\n   Y\n   |\n   |\n   .-----X\n ／\nZ\n\n   Z\n   |   Y\n   | ／\n   .-----X\n\nROS URDf\n       Z\n       |   X\n       | ／\n Y-----.\n\n*/\n\nconst mouse = new THREE.Vector2();\nconst raycaster = new THREE.Raycaster();\n\nconst toMouseCoord = (el, e, v) => {\n  v.x = ((e.pageX - el.offsetLeft) / el.offsetWidth) * 2 - 1;\n  v.y = -((e.pageY - el.offsetTop) / el.offsetHeight) * 2 + 1;\n};\n\n// Get which part of the robot is hit by the mouse click\nconst getCollisions = (camera, robot, mouse) => {\n  if (!robot) return [];\n\n  raycaster.setFromCamera(mouse, camera);\n\n  const meshes = [];\n  robot.traverse(c => c.type === \"Mesh\" && meshes.push(c));\n\n  return raycaster.intersectObjects(meshes);\n};\n\nconst isJoint = j => {\n  return j.isURDFJoint && j.jointType !== \"fixed\";\n};\n\n// Find the nearest parent that is a joint\nconst findNearestJoint = m => {\n  let curr = m;\n  while (curr) {\n    if (isJoint(curr)) {\n      break;\n    }\n    curr = curr.parent;\n  }\n  return curr;\n};\n\nconst LoadModel = ({ filepath }) => {\n  const [hovered, setHovered] = React.useState(null);\n  const { camera, gl } = useThree();\n  const posX = useControl(\"Pos X\", { type: \"number\", spring: true });\n  const posY = useControl(\"Pos Y\", { type: \"number\", spring: true });\n  const posZ = useControl(\"Pos Z\", { type: \"number\", spring: true });\n\n  // loading robot model from urdf\n  // https://raw.githubusercontent.com/{username}/{repo_name}/{branch}/{filepath}\n  const ref = useRef();\n  const robot = useLoader(URDFLoader, filepath, loader => {\n    loader.loadMeshFunc = (path, manager, done) => {\n      new STLLoader(manager).load(\n        path,\n        result => {\n          const material = new THREE.MeshPhongMaterial();\n          const mesh = new THREE.Mesh(result, material);\n          done(mesh);\n        },\n        null,\n        err => done(null, err)\n      );\n    };\n    loader.fetchOptions = {\n      headers: { Accept: \"application/vnd.github.v3.raw\" }\n    };\n  });\n  let robotJointName = [];\n  robotJointName = useMemo(() => Object.keys(robot.joints), [robot]);\n\n  let jointName = useControl(\"jointName\", {\n    type: \"select\",\n    items: robotJointName\n  });\n  useControl(\"jointAngle\", {\n    type: \"number\",\n    value: robot.joints[jointName].angle,\n    min: -6.28,\n    max: 6.28,\n    onChange: e => {\n      robot.joints[jointName].setAngle(e);\n    }\n  });\n\n  // The highlight material\n  const highlightMaterial = new THREE.MeshPhongMaterial({\n    shininess: 10,\n    color: \"#FFFFFF\",\n    emissive: \"#FFFFFF\",\n    emissiveIntensity: 0.25\n  });\n\n  // Highlight the link geometry under a joint\n  const highlightLinkGeometry = (m, revert) => {\n    const traverse = c => {\n      // Set or revert the highlight color\n      if (c.type === \"Mesh\") {\n        if (revert) {\n          c.material = c.__origMaterial;\n          delete c.__origMaterial;\n        } else {\n          c.__origMaterial = c.material;\n          c.material = highlightMaterial;\n        }\n      }\n\n      // Look into the children and stop if the next child is\n      // another joint\n      if (c === m || !isJoint(c)) {\n        for (let i = 0; i < c.children.length; i++) {\n          traverse(c.children[i]);\n        }\n      }\n    };\n    traverse(m);\n  };\n\n  const onMouseMove = event => {\n    toMouseCoord(gl.domElement, event, mouse);\n    const collision = getCollisions(camera, robot, mouse).shift() || null;\n    const joint = collision && findNearestJoint(collision.object);\n\n    if (joint !== hovered) {\n      if (hovered) {\n        //console.log(\"pointer out\");\n        highlightLinkGeometry(hovered, true);\n        setHovered(null);\n      }\n      if (joint) {\n        //console.log(\"pointer over\");\n        highlightLinkGeometry(joint, false);\n        setHovered(joint);\n      }\n    }\n  };\n\n  // get URDFJoint\n  //const robotJoints = useMemo(() => Object.keys(robot.joints).map(jointName => robot.joints[jointName].setAngle(robot.joints[jointName].angle)), [robot] )\n  //const robotJoints = useMemo(() => Object.keys(robot.joints).map(jointName => robot.joints[jointName]), [robot] )\n  //console.log(robotJoints);\n\n  return (\n    <a.mesh\n      position-x={posX}\n      position-y={posY}\n      position-z={posZ}\n      rotation={[-0.5 * Math.PI, 0, Math.PI]}\n      scale={[10, 10, 10]}\n    >\n      <primitive\n        ref={ref}\n        object={robot}\n        dispose={null}\n        onPointerMove={e => onMouseMove(e)}\n        //onPointerOver={(e) => highlightLinkGeometry(e.object, false)}\n        onPointerOut={e => {\n          if (hovered) {\n            highlightLinkGeometry(hovered, true);\n            setHovered(null);\n          }\n        }}\n      />\n    </a.mesh>\n  );\n};\n\nexport const Work = () => {\n  //console.log(props);\n  //console.log(props.qs);  // querystring\n  var modelpath =\n    \"https://raw.githubusercontent.com/nakano16180/robot-web-viewer/master/public/urdf/open_manipulator.URDF\";\n\n  const orbit = useRef();\n  const transform = useRef();\n  const mode = useControl(\"mode\", {\n    type: \"select\",\n    items: [\"translate\", \"rotate\"]\n  });\n  useEffect(() => {\n    if (transform.current) {\n      const controls = transform.current;\n      controls.setMode(mode);\n      const callback = event => (orbit.current.enabled = !event.value);\n      controls.addEventListener(\"dragging-changed\", callback);\n      return () => controls.removeEventListener(\"dragging-changed\", callback);\n    }\n  });\n\n  return (\n    <div css={theme}>\n      <Canvas camera={{ position: [0, 5, 10] }}>\n        <hemisphereLight\n          skyColor={\"#455A64\"}\n          groundColor={\"#000\"}\n          intensity={0.5}\n          position={[0, 1, 0]}\n        />\n        <directionalLight\n          color={0xffffff}\n          position={[4, 10, 1]}\n          shadowMapWidth={2048}\n          shadowMapHeight={2048}\n          castShadow\n        />\n        <Suspense fallback={null}>\n          <TransformControls ref={transform} mode={mode}>\n            <LoadModel filepath={modelpath} />\n          </TransformControls>\n          <OrbitControls ref={orbit} />\n        </Suspense>\n        <gridHelper args={[0, 0, 0]} />\n        <axesHelper />\n      </Canvas>\n      <Controls />\n    </div>\n  );\n};\n","/** @jsx jsx */\nimport { css, jsx, Global } from \"@emotion/core\";\nimport emotionReset from \"emotion-reset\";\nimport { Work } from \"./work\";\n\nconst globalStyles = css`\n  ${emotionReset}\n  *, *::after, *::before {\n    box-sizing: border-box;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    font-smoothing: antialiased;\n  }\n`;\n\nconst App = () => {\n  return (\n    <div>\n      <Global styles={globalStyles} />\n      <Work />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport queryString from \"query-string\";\n// import './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Route\n        basename={process.env.PUBLIC_URL}\n        render={props => <App qs={queryString.parse(props.location.search)} />}\n      />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}