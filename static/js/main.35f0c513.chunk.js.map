{"version":3,"sources":["work.js","App.js","serviceWorker.js","index.js"],"names":["theme","css","Plane","props","receiveShadow","attach","args","color","mouse","THREE","raycaster","isJoint","j","isURDFJoint","jointType","LoadModel","robotJointName","filepath","React","useState","hovered","setHovered","useThree","camera","gl","posX","useControl","type","spring","posY","posZ","ref","useRef","robot","useLoader","URDFLoader","loader","loadMeshFunc","path","manager","done","split","pop","toLowerCase","STLLoader","load","result","material","mesh","err","fetchOptions","headers","Accept","useMemo","Object","keys","joints","jointName","items","highlightMaterial","value","angle","min","max","onChange","e","setAngle","shininess","emissive","emissiveIntensity","highlightLinkGeometry","m","revert","traverse","c","__origMaterial","i","children","length","onMouseMove","event","el","v","domElement","x","pageX","offsetLeft","offsetWidth","y","pageY","offsetTop","offsetHeight","collision","setFromCamera","meshes","push","intersectObjects","getCollisions","shift","joint","curr","parent","findNearestJoint","object","position-x","position-y","position-z","rotation","Math","PI","scale","dispose","onPointerMove","onPointerOut","Work","modelpath","qs","orbit","transform","mode","useEffect","current","controls","setMode","callback","enabled","addEventListener","removeEventListener","position","skyColor","groundColor","intensity","shadowMapWidth","shadowMapHeight","castShadow","fallback","globalStyles","emotionReset","App","styles","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","queryString","parse","search","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.35f0c513.chunk.js","sourcesContent":["/** @jsx jsx */\nimport * as THREE from \"three\";\nimport React, { useRef, useEffect, useState, Suspense, useMemo } from \"react\";\nimport { Canvas, useLoader, useThree, useFrame } from \"react-three-fiber\";\nimport { css, jsx } from \"@emotion/core\";\nimport { a } from \"@react-spring/three\";\n\nimport { STLLoader } from \"three/examples/jsm/loaders/STLLoader.js\";\nimport URDFLoader from \"urdf-loader\";\n\nimport { OrbitControls, TransformControls } from \"drei\";\nimport { Controls, useControl } from \"react-three-gui\";\n\nconst theme = css`\n  width: 100vw;\n  height: 100vh;\n  background-color: #272727;\n`;\n\nconst Plane = ({ ...props }) => {\n  return (\n    <mesh {...props} receiveShadow>\n      <planeBufferGeometry attach=\"geometry\" args={[10, 10]} />\n      <meshPhongMaterial attach=\"material\" color=\"lightpink\" />\n    </mesh>\n  );\n};\n\nconst mouse = new THREE.Vector2();\nconst raycaster = new THREE.Raycaster();\n\nconst toMouseCoord = (el, e, v) => {\n  v.x = ((e.pageX - el.offsetLeft) / el.offsetWidth) * 2 - 1;\n  v.y = -((e.pageY - el.offsetTop) / el.offsetHeight) * 2 + 1;\n};\n\n// Get which part of the robot is hit by the mouse click\nconst getCollisions = (camera, robot, mouse) => {\n  if (!robot) return [];\n\n  raycaster.setFromCamera(mouse, camera);\n\n  const meshes = [];\n  robot.traverse(c => c.type === \"Mesh\" && meshes.push(c));\n\n  return raycaster.intersectObjects(meshes);\n};\n\nconst isJoint = j => {\n  return j.isURDFJoint && j.jointType !== \"fixed\";\n};\n\n// Find the nearest parent that is a joint\nconst findNearestJoint = m => {\n  let curr = m;\n  while (curr) {\n    if (isJoint(curr)) {\n      break;\n    }\n    curr = curr.parent;\n  }\n  return curr;\n};\n\nconst LoadModel = ({ filepath }) => {\n  const [hovered, setHovered] = React.useState(null);\n  const { camera, gl } = useThree();\n  const posX = useControl(\"Pos X\", { type: \"number\", spring: true });\n  const posY = useControl(\"Pos Y\", { type: \"number\", spring: true });\n  const posZ = useControl(\"Pos Z\", { type: \"number\", spring: true });\n\n  // loading robot model from urdf\n  // https://raw.githubusercontent.com/{username}/{repo_name}/{branch}/{filepath}\n  const ref = useRef();\n  const robot = useLoader(URDFLoader, filepath, loader => {\n    loader.loadMeshFunc = (path, manager, done) => {\n      const ext = path\n        .split(/\\./g)\n        .pop()\n        .toLowerCase();\n      switch (ext) {\n        case \"stl\":\n          new STLLoader(manager).load(\n            path,\n            result => {\n              const material = new THREE.MeshPhongMaterial();\n              const mesh = new THREE.Mesh(result, material);\n              done(mesh);\n            },\n            null,\n            err => done(null, err)\n          );\n          break;\n      }\n    };\n    loader.fetchOptions = {\n      headers: { Accept: \"application/vnd.github.v3.raw\" }\n    };\n  });\n  let robotJointName = [];\n  robotJointName = useMemo(() => Object.keys(robot.joints), [robot]);\n\n  let jointName = useControl(\"jointName\", {\n    type: \"select\",\n    items: robotJointName\n  });\n  let jointAngle = useControl(\"jointAngle\", {\n    type: \"number\",\n    value: robot.joints[jointName].angle,\n    min: -6.28,\n    max: 6.28,\n    onChange: e => {\n      robot.joints[jointName].setAngle(e);\n    }\n  });\n\n  // The highlight material\n  const highlightMaterial = new THREE.MeshPhongMaterial({\n    shininess: 10,\n    color: \"#FFFFFF\",\n    emissive: \"#FFFFFF\",\n    emissiveIntensity: 0.25\n  });\n\n  // Highlight the link geometry under a joint\n  const highlightLinkGeometry = (m, revert) => {\n    const traverse = c => {\n      // Set or revert the highlight color\n      if (c.type === \"Mesh\") {\n        if (revert) {\n          c.material = c.__origMaterial;\n          delete c.__origMaterial;\n        } else {\n          c.__origMaterial = c.material;\n          c.material = highlightMaterial;\n        }\n      }\n\n      // Look into the children and stop if the next child is\n      // another joint\n      if (c === m || !isJoint(c)) {\n        for (let i = 0; i < c.children.length; i++) {\n          traverse(c.children[i]);\n        }\n      }\n    };\n    traverse(m);\n  };\n\n  const onMouseMove = event => {\n    toMouseCoord(gl.domElement, event, mouse);\n    const collision = getCollisions(camera, robot, mouse).shift() || null;\n    const joint = collision && findNearestJoint(collision.object);\n\n    if (joint !== hovered) {\n      if (hovered) {\n        //console.log(\"pointer out\");\n        highlightLinkGeometry(hovered, true);\n        setHovered(null);\n      }\n      if (joint) {\n        //console.log(\"pointer over\");\n        highlightLinkGeometry(joint, false);\n        setHovered(joint);\n      }\n    }\n  };\n\n  // get URDFJoint\n  //const robotJoints = useMemo(() => Object.keys(robot.joints).map(jointName => robot.joints[jointName].setAngle(robot.joints[jointName].angle)), [robot] )\n  //const robotJoints = useMemo(() => Object.keys(robot.joints).map(jointName => robot.joints[jointName]), [robot] )\n  //console.log(robotJoints);\n\n  return (\n    <a.mesh\n      position-x={posX}\n      position-y={posY}\n      position-z={posZ}\n      rotation={[-0.5 * Math.PI, 0, Math.PI]}\n      scale={[10, 10, 10]}\n    >\n      <primitive\n        ref={ref}\n        object={robot}\n        dispose={null}\n        onPointerMove={e => onMouseMove(e)}\n        //onPointerOver={(e) => highlightLinkGeometry(e.object, false)}\n        onPointerOut={e => {\n          if (hovered) {\n            highlightLinkGeometry(hovered, true);\n            setHovered(null);\n          }\n        }}\n      />\n    </a.mesh>\n  );\n};\n\nexport const Work = ({ ...props }) => {\n  //console.log(props);\n  //console.log(props.qs);  // querystring\n  var modelpath =\n    \"https://raw.githubusercontent.com/nakano16180/robot-web-viewer/master/public/urdf/open_manipulator.URDF\";\n  if (props.qs.filepath) {\n    modelpath = props.qs.filepath;\n  }\n  const orbit = useRef();\n  const transform = useRef();\n  const mode = useControl(\"mode\", {\n    type: \"select\",\n    items: [\"translate\", \"rotate\"]\n  });\n  useEffect(() => {\n    if (transform.current) {\n      const controls = transform.current;\n      controls.setMode(mode);\n      const callback = event => (orbit.current.enabled = !event.value);\n      controls.addEventListener(\"dragging-changed\", callback);\n      return () => controls.removeEventListener(\"dragging-changed\", callback);\n    }\n  });\n\n  return (\n    <div css={theme}>\n      <Canvas camera={{ position: [0, 5, 10] }}>\n        <hemisphereLight\n          skyColor={\"#455A64\"}\n          groundColor={\"#000\"}\n          intensity={0.5}\n          position={[0, 1, 0]}\n        />\n        <directionalLight\n          color={0xffffff}\n          position={[4, 10, 1]}\n          shadowMapWidth={2048}\n          shadowMapHeight={2048}\n          castShadow\n        />\n        <Plane rotation={[-0.5 * Math.PI, 0, 0]} position={[0, 0, 0]} />\n        <Suspense fallback={null}>\n          <TransformControls ref={transform} mode={mode}>\n            <LoadModel filepath={modelpath} />\n          </TransformControls>\n          <OrbitControls ref={orbit} />\n        </Suspense>\n        <gridHelper args={[0, 0, 0]} />\n        <axesHelper />\n      </Canvas>\n      <Controls />\n    </div>\n  );\n};\n","/** @jsx jsx */\nimport { css, jsx, Global } from '@emotion/core';\nimport emotionReset from 'emotion-reset';\nimport { Work } from './work';\n\nconst globalStyles = css`\n    ${emotionReset}\n    *, *::after, *::before {\n        box-sizing: border-box;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-smoothing: antialiased;\n    }\n`;\n\nconst App = ({ ...props }) => {\n  return (\n    <div>\n      <Global styles={globalStyles} />\n      <Work { ...props}/>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\nimport queryString from 'query-string';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Route render={ (props) => \n        <App qs={queryString.parse(props.location.search)} />\n      }/>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}